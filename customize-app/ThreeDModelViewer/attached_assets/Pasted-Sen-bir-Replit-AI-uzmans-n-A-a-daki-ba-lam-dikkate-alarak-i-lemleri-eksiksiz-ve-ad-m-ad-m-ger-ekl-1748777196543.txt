Sen bir Replit AI uzmansın. Aşağıdaki bağlamı dikkate alarak işlemleri eksiksiz ve adım adım gerçekleştir:

**Proje Bağlamı:**

* **Proje Türü:** 3D fizik tabanlı ip/çember simülasyonu uygulaması.
* **Tech Stack:** React + TypeScript + Three.js, React Three Fiber, Cannon.js (fizik), @react-three/drei, three/examples/jsm/controls/DragControls, React DND (taş sürükle-bırak), Radix UI + Tailwind CSS.
* **Dosya Yapısı (Örnek):**

  ```
  client/
    src/
      components/
        three/
          DynamicRope.tsx       // Dinamik ip bileşeni (varsayılan taban model olarak yüklenecek)
          Hook.tsx              // Duvar çivisi bileşeni, DragControls hatası düzeltilecek
          StoneMesh.tsx         // Taş modeli bileşeni
      utils/
        generateRopeSegments.ts  // İp segment pozisyonlarını hesaplayan yardımcı fonksiyon
  attached_assets/
    models/
      hook.glb                  // Duvar çivisi modeli
      stone1.glb                // Taş modeli
  ```
* **Genel İş Akışı:**

  1. Uygulama açıldığında doğrudan “Dinamik İp” (DynamicRope) taban modeli gösterilecek.
  2. Dinamik İp sahnede kancalar arasında gerili duracak (msj’daki önceki talimatlara uygun).
  3. `Hook.tsx` bileşeninde “DragControls is not a constructor” hatası alınıyor; bu, `@react-three/drei` yerine yanlış DragControls import’undan kaynaklanıyor.
  4. DragControls kullanımı şu anda:

     ```tsx
     import { useGLTF, DragControls } from '@react-three/drei';
     ...
     const controls = new DragControls([ref.current], camera, gl.domElement);
     ```

     * Bu hatayı düzeltmek için `three/examples/jsm/controls/DragControls`’ı doğru şekilde import et ve Hook’u sürüklenebilir yaparken Drei’nin React/JSX DragControls bileşimini kullanmak yerine doğrudan Three.js DragControls API’sini uygula veya Drei’nin `useDrag` hook’unu tercih et.

**Yapılacaklar Listesi:**

1. **DynamicRope.tsx’i Varsayılan Açılan Taban Model Yap:**

   * **Dosya:** `client/src/components/three/DynamicRope.tsx`
   * **İstek:**

     1. Projeyi açarken `App.tsx` veya ana render noktasında `DynamicRope` bileşeni varsayılan olarak ilk görüntülenen bileşen olsun. Örnek:

        ```tsx
        // App.tsx
        import React from 'react';
        import DynamicRope from './components/three/DynamicRope';

        const App: React.FC = () => {
          return <DynamicRope />;
        };

        export default App;
        ```
     2. Eğer daha önce başka bir taban model (çember, düz ip) seçiliyorsa ilgili kodu kaldır veya comment’le. Artık sadece `DynamicRope` render edilecek.

2. **Hook.tsx Dosyasındaki DragControls Hatasını Düzelt:**

   * **Dosya:** `client/src/components/three/Hook.tsx`
   * **İstekler:**

     1. `@react-three/drei` yerine Three.js’in DragControls sınıfını kullanmak için aşağıdaki import’u ekleyin:

        ```tsx
        import { DragControls } from 'three/examples/jsm/controls/DragControls';
        ```
     2. Eğer Drei’nin `DragControls` bileşimi yerine Three.js DragControls kullanacaksanız:

        ```tsx
        import React, { useRef, useEffect } from 'react';
        import { useGLTF } from '@react-three/drei';
        import { useThree } from '@react-three/fiber';
        import { DragControls } from 'three/examples/jsm/controls/DragControls';

        const Hook: React.FC<{
          position: [number, number, number];
          onDrag: (pos: [number, number, number]) => void;
        }> = ({ position, onDrag }) => {
          const ref = useRef<THREE.Mesh>(null);
          const { scene } = useGLTF('/attached_assets/models/hook.glb');
          const { camera, gl, scene: threeScene } = useThree();

          useEffect(() => {
            if (ref.current) {
              // Three.js DragControls'u doğru şekilde oluştur
              const controls = new DragControls([ref.current], camera, gl.domElement);
              controls.addEventListener('drag', () => {
                const x = ref.current!.position.x;
                const y = ref.current!.position.y;
                const z = ref.current!.position.z;
                onDrag([x, y, z]);
              });
              return () => {
                controls.dispose();
              };
            }
          }, [camera, gl.domElement, onDrag]);

          return (
            <primitive
              object={scene}
              ref={ref}
              position={position}
              scale={[0.2, 0.2, 0.2]}
            />
          );
        };

        export default Hook;
        ```
     3. Eğer `three/examples/jsm/controls/DragControls` import’u hala hata veriyorsa, Drei’nin `useDrag` hook’unu kullan:

        ```tsx
        import React, { useRef } from 'react';
        import { useGLTF, useDrag } from '@react-three/drei';

        const Hook: React.FC<{
          position: [number, number, number];
          onDrag: (pos: [number, number, number]) => void;
        }> = ({ position, onDrag }) => {
          const ref = useRef<THREE.Mesh>(null);
          const { scene } = useGLTF('/attached_assets/models/hook.glb');
          // useDrag hook'u ile sürüklenebilir hale getir
          const { dom, camera, raycaster } = useThree();
          useDrag(
            ref,
            ({ offset: [ox, oy, oz] }) => {
              if (ref.current) {
                ref.current.position.set(position[0] + ox, position[1] + oy, position[2] + oz);
                onDrag([ref.current.position.x, ref.current.position.y, ref.current.position.z]);
              }
            },
            { transform: false }
          );

          return (
            <primitive
              object={scene}
              ref={ref}
              position={position}
              scale={[0.2, 0.2, 0.2]}
            />
          );
        };

        export default Hook;
        ```
     4. Yukarıdaki iki yöntemden biri seçilip kod tamamen gözden geçirilmeli. `DragControls is not a constructor` hatası alınan kısım tamamen kaldırılacak ve yerine yukarıdaki örneklerden biri uygulanacak.

3. **DynamicRope İçerisindeki Kancaları (Hook) ve İp Segmentlerini Güncelle:**

   * **Dosya:** `client/src/components/three/DynamicRope.tsx`
   * **İstekler:**

     1. İki adet `Hook` bileşeni render ederken `position={hookA}` ve `position={hookB}` prop’larını DynamicRope state’inden verin:

        ```tsx
        const [hookA, setHookA] = useState<[number, number, number]>([-1, 1, 0]);
        const [hookB, setHookB] = useState<[number, number, number]>([1, 1, 0]);
        ...
        <Hook position={hookA} onDrag={(pos) => setHookA(pos)} />
        <Hook position={hookB} onDrag={(pos) => setHookB(pos)} />
        ```
     2. `generateRopeSegments(hookA, hookB, 20)` çağrısı `useMemo` içinde hesaplanmaya devam edecek.
     3. İki Hook arasında Three.js DragControls düzeltildikten sonra Rope segment pozisyonları her iki hook’a sabitlenecek.
     4. Eğer başka taban model (çember, düz ip) render eden kod varsa, comment-leyin veya silin. Artık sadece DynamicRope var.

4. **Test ve Hata Kontrolü:**

   * **İstekler:**

     1. Uygulamayı başlatırken `DynamicRope` sahneye gelsin, iki Hook görünmeli ve fareyle sürüklenebilmeli. Konsolda “DragControls is not a constructor” hatası olmamalı.
     2. İki Hook’u taşıdıkça Rope segmentleri doğru şekilde güncellenmeli ve ipin çok az sarkması gözlemlenmeli.
     3. Tüm kod çalışırken FPS ≥ 30 olmalı ve hiçbir runtime hatası (undefined, constructor hatası) görünmemeli.
   * **Beklenen:**

     * `Hook.tsx`’deki DragControls hatası tamamen giderilmiş olmalı.
     * Uygulama açıldığında doğrudan `DynamicRope` render edilecek.
     * İki Hook sürüklenebilecek, ip segmentleri otomatik uyum sağlayacak.

5. **Kod Tamamlandıktan Sonra:**

   * Yaptığın değişiklikleri adım adım özetle:

     1. `App.tsx` içinde sadece `DynamicRope` render ederek varsayılan taban modeli olarak ayarladın.
     2. `Hook.tsx`: `DragControls` import’unu `three/examples/jsm/controls/DragControls` olarak düzelttin veya `useDrag` örneğini uyguladın.
     3. `DynamicRope.tsx`: Kancaları (`Hook`), Rope segmentlerini (`generateRopeSegments`) ve fizik bağlantılarını gözden geçirip, artık doğru DragControls ekleyip kancaları sürüklenebilir yaptın.
   * Olası hata durumlarını listele:

     * “Hook sürüklenmiyorsa DragControls doğru import edilmemiş veya DOM elementi henüz oluşmamıştır; useEffect bağımlılıklarını kontrol et.”
     * “Rope segmentleri güncellenmiyorsa `generateRopeSegments` bağımlılıkları doğru tanımlanmamış olabilir.”
     * “FPS düşüyorsa segment sayısını azalt veya `useMemo` optimizasyonlarını gözden geçir.”

Yukarıdaki talimatları takip ederek `Hook.tsx`’deki DragControls hatasını düzelt ve `DynamicRope` bileşenini varsayılan taban model olarak ayarla.
