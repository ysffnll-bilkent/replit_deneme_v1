Sen bir Replit AI uzmansın. Aşağıdaki bağlamı dikkate alarak işlemleri eksiksiz ve adım adım gerçekleştir:

**Proje Bağlamı:**

* **Proje Türü:** 3D fizik tabanlı ip/çember simülasyonu uygulaması.
* **Tech Stack:** React + TypeScript + Three.js, React Three Fiber, Cannon.js (fizik), React DND (drag-and-drop), @react-three/drei (useGLTF), Radix UI + Tailwind CSS.
* **Dosya Yapısı (Örnek):**

  ```
  client/
    src/
      components/
        three/
          DynamicRope.tsx       // Dinamik ip bileşeni
          RopeSegment.tsx       // Dinamik ip segmentini render eden bileşen
          EndModel.tsx          // Uç model bileşeni
      utils/
        generateTriangleSupports.ts
  attached_assets/
    models/
      Duck.glb                // Hatalı import edilen model; doğru yolu ve adı kontrol et
      endModel.glb            // EndModel için kullanılacak model
  ```

**Mevcut Hatalar ve İstekler:**

1. **Ref Hatası (“Function components cannot be given refs”)**

   * Hata Metni:

     ```
     Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?
     Check the render method of `DynamicRope`. Error Component Stack
         at RopeSegment (DynamicRope.tsx:7:24)
         at DynamicRope (DynamicRope.tsx:29:5)
         ...
     ```
   * Yapılacaklar:

     1. `RopeSegment.tsx` bileşenini `forwardRef` kullanarak yeniden düzenle. Örneğin:

        ```tsx
        import React, { forwardRef } from 'react';
        import { useCylinder } from '@react-three/cannon';

        const RopeSegment = forwardRef((props: { position: [number, number, number] }, ref) => {
          const [refPhys] = useCylinder(() => ({
            mass: 0.1,
            position: props.position,
            args: [0.02, 0.02, 0.2, 8],
          }), ref);
          return (
            <mesh ref={refPhys}>
              <cylinderGeometry args={[0.02, 0.02, 0.2, 8]} />
              <meshStandardMaterial color="gray" />
            </mesh>
          );
        });

        export default RopeSegment;
        ```
     2. `DynamicRope.tsx` içinde `RopeSegment`’e ref verirken artık hata çıkmayacak. Örneğin:

        ```tsx
        import React, { useRef, Suspense } from 'react';
        import { Canvas } from '@react-three/fiber';
        import { Physics, useSphere } from '@react-three/cannon';
        import RopeSegment from './RopeSegment';

        const DynamicRope: React.FC = () => {
          const segmentRefs = useRef<React.LegacyRef<any>[]>([]);
          // Eski ref kullanımını bu şekilde güncelle
          return (
            <Canvas>
              <Suspense fallback={null}>
                <Physics>
                  {/* ... */}
                  {positions.map((pos, idx) => (
                    <RopeSegment
                      key={idx}
                      position={pos}
                      ref={(el) => { segmentRefs.current[idx] = el; }}
                    />
                  ))}
                </Physics>
              </Suspense>
            </Canvas>
          );
        };

        export default DynamicRope;
        ```
     3. `DynamicRope.tsx` içinde `RopeSegment` import ve kullanımını yukarıdaki şekilde `forwardRef` destekleyecek biçime dönüştür.

2. **GLB Yükleme Hatası (“Could not load /models/Duck.glb: Unexpected token '<'”)**

   * Hata Metni:

     ```
     Uncaught Error: Could not load /models/Duck.glb: Unexpected token '<', "<!doctype "... is not valid JSON
     at useLoader (@react-three/drei)
     at EndModel (EndModel.tsx:23)
     ```
   * Yapılacaklar:

     1. `EndModel.tsx` bileşeninde `useGLTF` ile `Duck.glb` yerine doğru model dosyasının yolunu ve uzantısını kullan. Örneğin:

        ```tsx
        import React, { forwardRef, Suspense } from 'react';
        import { useGLTF } from '@react-three/drei';

        // Eğer Duck.glb değil de endModel.glb kullanılacaksa:
        const EndModel = forwardRef((props: { position: [number, number, number]; stoneScale: number }, ref) => {
          // Doğru path: '/attached_assets/models/endModel.glb'
          const { scene } = useGLTF('/attached_assets/models/endModel.glb');
          return (
            <group ref={ref} position={props.position} scale={[props.stoneScale * 1.3, props.stoneScale * 1.3, props.stoneScale * 1.3]}>
              <primitive object={scene} />
            </group>
          );
        });

        export default EndModel;
        ```
     2. Projede `public` veya Replit’in kök klasöründe modeli sunulan doğru yolu sağlayın:

        * Model gerçek konumu: `attached_assets/models/endModel.glb`
        * Replit’in sunacağı yol: `/models/endModel.glb` yerine `/attached_assets/models/endModel.glb` olarak güncelle.
     3. `useGLTF`’yi kullanan her yerde doğru URL’ye işaret edin; `<Suspense>` wrapper içinde bekleme durumunu ele alın.

3. **DynamicRopeCanvas’da “Canvas” Komponenti Hatası**

   * Hata Metni:

     ```
     The above error occurred in the <EndModel> component:
         at EndModel (EndModel.tsx:23:3)
         at Suspense
         at PhysicsProvider
         at CanvasWrapper
         at DynamicRopeCanvas (DynamicRopeCanvas.tsx:53:45)
     ```
   * Yapılacaklar:

     1. `DynamicRopeCanvas.tsx` içinde Canvas bileşenini `<Canvas>...</Canvas>` şeklinde tam sarmalayın ve bileşenleri doğru sırada yerleştirin. Örneğin:

        ```tsx
        import React, { Suspense } from 'react';
        import { Canvas } from '@react-three/fiber';
        import { Physics } from '@react-three/cannon';
        import EndModel from './EndModel';
        import RopeSegment from './RopeSegment';
        import { generateTriangleSupports } from '../utils/generateTriangleSupports';

        const DynamicRopeCanvas: React.FC = () => {
          const supports = generateTriangleSupports(1, 0.8); // Örnek baseWidth=1, height=0.8

          return (
            <Canvas shadows camera={{ position: [0, 1, 2], fov: 50 }}>
              <ambientLight intensity={0.5} />
              <directionalLight position={[5, 5, 5]} intensity={1} />
              <Suspense fallback={null}>
                <Physics>
                  {supports.map((pos, idx) => (
                    <mesh key={idx} position={[pos.x, pos.y, pos.z]}>
                      <cylinderGeometry args={[0.02, 0.02, 0.2, 8]} />
                      <meshStandardMaterial color="gray" />
                    </mesh>
                  ))}

                  {/* Dinamik ip segmentleri */}
                  {supports.length > 0 &&
                    supports.map((_, idx) => (
                      <RopeSegment key={idx} position={[0, 0, 0]} ref={null /* ref kullanımı RopeSegment içinde forwardRef olduğundan çalışacak */} />
                    ))}

                  {/* Uç modeller */}
                  {supports.map((pos, idx) => (
                    <EndModel
                      key={`end-${idx}`}
                      position={[pos.x, pos.y - 0.11, pos.z]} // Sopa tabanının hemen altında
                      stoneScale={0.1}
                    />
                  ))}
                </Physics>
              </Suspense>
            </Canvas>
          );
        };

        export default DynamicRopeCanvas;
        ```
     2. `Canvas` sarmalayıcısını en dışta tutun; `Suspense` ve `Physics` iç bileşenleri doğru hiyerarşide kullanın.
     3. Hatalı model yolunu düzelttikten sonra `<EndModel>` yükleme sorunu ortadan kalkmalı.

4. **Test ve Hata Durumları**

   * **Test 1:** Dinamik ip bileşeni ekrana gelmeli, üç destek kısa silindir gibi görüntülenmeli ve üç destek havada izosceles üçgen oluşturmeli.
   * **Test 2:** `EndModel` düzgün yüklenmeli; `/attached_assets/models/endModel.glb` yolunda model bulunmalı ve yüklenirken hata vermemeli.
   * **Test 3:** `DynamicRopeCanvas` içindeki `RopeSegment` render edilirken daha önceki ref hatası tekrarlanmamalı; segmentler düzgün bağlanmalı.
   * **Test 4:** Konsolda artık “Function components cannot be given refs” ve “Could not load /models/Duck.glb” hataları görünmemeli.
   * **Test 5:** Performans testi: Bileşen açıldığında FPS ≥ 30 olmalı ve tüm fizik simülasyonu kararlı çalışmalı.

**Kod Tamamlandıktan Sonra:**

* Yaptığın değişiklikleri adım adım özetle:

  1. `RopeSegment.tsx`: `forwardRef` kullanarak ref hatasını çözdün.
  2. `EndModel.tsx`: `useGLTF` yolunu `/attached_assets/models/endModel.glb` olarak düzelttin ve `forwardRef` ekledin.
  3. `DynamicRopeCanvas.tsx`: `Canvas` sarmalayıcısını, `Suspense`, `Physics`, segment ve destek render’ını doğru şekilde yerleştirdin.
  4. Model dosya yollarını `attached_assets/models/` altına düzeltip Replit’in sunacağı doğru URL’leri kullandın.
* Olası hata durumlarını listele:

  * “RopeSegment hala ref hatası veriyorsa `forwardRef` doğru uygulanmamış.”
  * “EndModel GLB yolunda yazım hatası varsa model yüklenmez.”
  * “PhysicsProvider içindeki yapı hatalıysa ip fiziksel olarak asılı durmayabilir.”
  * “Performans düşerse segment sayısını veya dokuların boyutunu optimize et.”

Yukarıdaki talimatları yerine getirerek dosyaları güncelle, yeni bileşen oluştur ve projeyi hatasız şekilde çalışır hale getir.
