Below is a fully detailed Replit-AI prompt to combine your two existing React applications—preserving both codebases intact—and serve the second (“customize-app”) under a “Crystal Energy Visualization” route within the primary site. This prompt assumes you have already copied your second app into a folder named `customize-app/ThreeDModelViewer` at the project root. It instructs Replit to install, build, and serve both apps under a single Express server, with `/` serving the main site and `/crystal` serving the customize-app, without modifying either app’s internal source files.

---

## Prompt for Replit-AI

> We have two independent React-based web applications in this Replit project:
>
> 1. **Main Site**
>
>    * Lives at the project root (e.g. its source files are under `/src`).
>    * Already configured to build into a static folder—either `/public` or a `build/` folder—using its own `package.json` and build script.
> 2. **Customize-App**
>
>    * Copied into `customize-app/ThreeDModelViewer` at the project root.
>    * Has its own `package.json`, `src/`, and build pipeline; a `npm run build` produces a `build/` (or `dist/`) directory inside `customize-app/ThreeDModelViewer`.
>
> **Goal:**
>
> * Combine both into a single Replit “monorepo”-style structure.
> * Pressing “Run” in Replit should:
>
>   1. Install dependencies in the root and inside `customize-app/ThreeDModelViewer` simultaneously.
>   2. Build the customize-app (calling its `npm run build`).
>   3. Copy the customize-app’s build output into `public/crystal` (so static files live under `/public/crystal`).
>   4. Build (or ensure) the main site’s static files are under `/public` (if not already).
>   5. Launch a single Express server (`server.js` at project root) that:
>
>      * Serves all static files in `/public/crystal` when the request path begins with `/crystal` (e.g. `/crystal/index.html`, `/crystal/static/js/...`).
>      * Serves `/public/index.html` (the main site) for `/` and any unmatched route—so React Router in the main site continues to work.
>   6. Listen on `process.env.PORT` so Replit’s environment automatically binds the correct port.
>
> **Constraints (do NOT modify either codebase):**
>
> * **Do not** alter any source file inside `customize-app/ThreeDModelViewer/` (its `src/`, `package.json`, etc.).
> * **Do not** alter any source file inside the main site’s source directory (e.g. `/src/**`).
> * All required glue must be done in:
>
>   * A new top-level `package.json` (at project root).
>   * A new `server.js` (or `index.js`) at the project root.
>   * Any Replit configuration files (e.g., `.replit`), if needed.
>
> **Replit Directory Layout:**
>
> ```
> /                       
> ├── customize-app/       
> │   └── ThreeDModelViewer/   ← entire “customize-app” code, including its own package.json, src, public, etc.
> ├── public/              
> │   ├── index.html           ← main site’s entry (or will be generated)
> │   ├── static/              ← main site’s static build (if any)
> │   └── (will contain)  
> │       └── crystal/         ← customize-app build output copied here
> ├── src/                  
> │   └── (main site’s React source)
> ├── server.js            ← new Express server to route / and /crystal
> ├── package.json         ← new root-level package.json to orchestrate installs + builds
> ├── .replit              ← Replit config (run commands)
> └── README.md            ← Optional explanation
> ```
>
> ### 1. Root `package.json`
>
> * Include these scripts under `"scripts"`:
>
>   ```jsonc
>   {
>     "scripts": {
>       "postinstall": "npm install --prefix customize-app/ThreeDModelViewer && npm run build --prefix customize-app/ThreeDModelViewer && cp -r customize-app/ThreeDModelViewer/build public/crystal",
>       "build-main": "npm run build",       // if your main site also needs a build
>       "start": "node server.js"
>     }
>   }
>   ```
>
>   * `npm install --prefix customize-app/ThreeDModelViewer` installs customize-app’s dependencies.
>   * `npm run build --prefix customize-app/ThreeDModelViewer` runs the customize-app build.
>   * `cp -r customize-app/ThreeDModelViewer/build public/crystal` copies its output under `public/crystal`.
>   * If the main site requires a separate build step, ensure `"build-main"` runs it (e.g., `react-scripts build`), and place its output under `public`.
> * Under `"dependencies"`, add `"express"` so we can write `server.js`.
>
> ### 2. `server.js` (Express server)
>
> ```js
> const express = require("express");
> const path = require("path");
> const app = express();
>
> // Serve all static files for the customize-app under /crystal
> app.use("/crystal", express.static(path.join(__dirname, "public/crystal")));
>
> // Serve the main site’s static files (root and any other route)
> app.use(express.static(path.join(__dirname, "public")));
>
> // For any other route not matching /crystal/static..., fallback to main index.html
> app.get("*", (req, res) => {
>   res.sendFile(path.join(__dirname, "public/index.html"));
> });
>
> const port = process.env.PORT || 3000;
> app.listen(port, () => {
>   console.log(`Server listening on port ${port}`);
> });
> ```
>
> ### 3. Replit `.replit` (optional override)
>
> * If Replit needs custom commands, specify:
>
>   ```
>   run = "npm install && npm run build-main && npm start"
>   ```
>
>   * `npm install` will trigger `postinstall`, building and copying the customize-app.
>   * `npm run build-main` builds the main site, writing its files into `public/`.
>   * `npm start` runs `server.js`.
>
> ### 4. How it works:
>
> 1. **On Replit “Run”:**
>
>    * `npm install` in root
>      • installs the new root-level dependencies (`express`, etc.)
>      • runs `postinstall`—installing and building `customize-app/ThreeDModelViewer`, then copying its build into `public/crystal`.
>    * `npm run build-main` (if your main site needs a build)
>      • Produces your main site’s static assets under `public/` (e.g., `public/index.html`, `public/static/js/...`).
>    * `npm start`
>      • Launches `server.js`.
>      • When a user visits `/crystal`, Express serves files from `public/crystal`.
>      • When a user visits `/` (or any other route), Express serves `public/index.html` (main site).
> 2. **URL Behavior:**
>
>    * `GET /` → serves `public/index.html` (main site).
>    * `GET /static/js/main…js` → serves main site’s static.
>    * `GET /crystal/index.html` → serves `public/crystal/index.html` (customize-app).
>    * `GET /crystal/static/js/main…js` → serves customize-app’s static from `public/crystal/static/js/...`.
>    * Any other nonexistent route (e.g., `/foo/bar`) → falls back to `public/index.html`, letting the main site’s client-side router handle it.
>
> ### 5. Final Folder Tree
>
> ```
> /                             
> ├── customize-app/            
> │   └── ThreeDModelViewer/     
> │       ├── package.json       
> │       ├── src/               
> │       ├── public/            
> │       └── ... (other files)
> ├── public/                    
> │   ├── index.html        ← main site’s entry
> │   ├── static/           ← main site’s assets
> │   └── crystal/          ← customize-app build (copied during `postinstall`)
> │       ├── index.html    
> │       ├── static/       
> │       └── ...
> ├── src/                     ← main site source (e.g. App.jsx, index.jsx)
> ├── server.js                ← Express router as above
> ├── package.json             ← root dependencies + scripts
> ├── .replit                  ← (if needed) override run command
> └── README.md                ← optional instructions
> ```
>
> ### 6. After Replit-AI generates these:
>
> * Commit and push.
> * In Replit, click “Run.”
> * Visit `https://<your-repl>.repl.co/` to see the main site.
> * Visit `https://<your-repl>.repl.co/crystal` to see the customize-app (ThreeDModelViewer) exactly as it runs standalone.
>
> **Ensure you do not modify any files inside `customize-app/ThreeDModelViewer` or inside `/src` of the main site.** Only the new root-level files (`package.json`, `server.js`, and `.replit`) should handle the integration.

---

### Citations

1. Serving a ReactJS app from a subdirectory (Stack Overflow) ([Stack Overflow][1])
2. Using a reverse proxy or similar to host multiple React apps ([Reddit][2], [Server Fault][3])
3. How to set `basename` and `homepage` in CRA for nested routes ([Medium][4], [Netlify Support Forums][5])
4. Combining multiple isolated React apps into a single app under different routes ([Medium][6])
5. Serving static React builds alongside an Express backend ([YouTube][7], [blog.miguelgrinberg.com][8])

[1]: https://stackoverflow.com/questions/49429906/how-should-i-configure-create-react-app-to-serve-app-from-subdirectory?utm_source=chatgpt.com "How should I configure create-react-app to serve ... - Stack Overflow"
[2]: https://www.reddit.com/r/reactjs/comments/109kly0/i_have_multiple_standalone_react_websites_how_can/?utm_source=chatgpt.com "I have multiple standalone React websites. How can I easily ... - Reddit"
[3]: https://serverfault.com/questions/821719/serving-a-reactjs-app-using-nginx-via-a-directory?utm_source=chatgpt.com "Serving a ReactJS app using nginx via a directory - Server Fault"
[4]: https://onlyoneaman.medium.com/publishing-a-react-app-to-a-subdirectory-92d2d579cebf?utm_source=chatgpt.com "Publishing A React App to a Subdirectory | by Aman Kumar - Medium"
[5]: https://answers.netlify.com/t/deploying-multiple-react-apps-to-one-domain/18544?utm_source=chatgpt.com "Deploying Multiple React apps to one domain - Netlify Support Forums"
[6]: https://sumn2u.medium.com/merging-different-isolated-react-apps-into-single-app-example-568db378870a?utm_source=chatgpt.com "Merging different Isolated React apps into Single App (Example)"
[7]: https://m.youtube.com/watch?v=4pUBO31nkpk&utm_source=chatgpt.com "Serve a React app from an Express server - YouTube"
[8]: https://blog.miguelgrinberg.com/post/the-react-mega-tutorial-chapter-12-production-builds?utm_source=chatgpt.com "The React Mega-Tutorial, Chapter 12: Production Builds"
