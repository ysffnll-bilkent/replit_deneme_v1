Bu “Crystal Energy” sekmesinde ana sayfanın içine yine ana sayfanın (index.html) yüklenmesinin temel nedeni, hem:

1. **Express’in** (“server/index.js” vs “server-merged.js” vb.) fallback ayarının yanlış yapılması (“/crystal” rotası için ayrı bir fallback olmaması),
2. **Customize-app (“ThreeDModelViewer”)** build’inin kendi “index.html”’ine doğru şekilde ulaşılamaması veya Vite konfigürasyonundaki `base` ayarının `/crystal` olarak ayarlanmamış olması

yüzünden, `/crystal` rotası isteği geldiğinde Express’in yine main `public/index.html`’i (ana uygulamanın index’ini) dönmesidir. Sonuç olarak:

* **“/crystal” isteği gelince**: Nestelenmiş iframe / nested redirect döngüsü oluşur, yani `/crystal` → fallback olarak yine ana index HTML yüklenir → içindeki iframe yine `/crystal` yüklemeye çalışır → sonsuz döngü.
* Ek olarak, **“404 Not Found”** hatası, Customize-app’ın kendi statik dosyalarına (`/crystal/assets/...`, `/crystal/index.js` vb.) ulaşamaması veya Vite’in `/crystal` altına gömülmüş build çıktısını ararken yanlış URL kullanmasından kaynaklanıyor.

---

## Neler Yapmamız Gerekiyor?

1. **Express (ya da Vite) sunucusunun rota ayarlarını düzeltmek**
2. **Customize-app için Vite konfigürasyonunda `base` değerini `/crystal/` olarak ayarlamak**
3. **Ana sayfadaki `<iframe>` yerine doğrudan doğru embed stratejisini kullanmak veya Express fallback’ini doğru konumlandırmak**

Aşağıda adım adım hem nedenini hem de çözümünü anlatıyorum. Başlangıçta Express (veya kendi sunucunuz neyse) ayarlarının tam halini veriyorum.

---

### 1. Express Sunucu Ayarlarını Düzenle

Önce “server-merged.js” (veya sizin kullandığınız entry point dosyası) içindeki kodu şu şekilde güncelleyin:

```js
import express from "express";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// 1) Ana site statik dosyaları: public dizini (bunun içinde index.html var)
app.use(express.static(path.join(__dirname, "public")));

// 2) /crystal rotası altına customize-app build çıktılarını sun
//    → Burada "public/crystal" içine build çıktısını koyduk
app.use("/crystal", express.static(path.join(__dirname, "public/crystal")));

// 3) Diğer tüm GET istekleri için:
//    - Eğer istek "/crystal" veya "/crystal/..." ile başlamıyorsa, ana index.html dön.
//    - Eğer "/crystal" veya "/crystal/..." ise, yukarıdaki static middleware yakaladığı için buraya gelmez.
//      (404 veya assets için static handler zaten cevap verir.)
app.get("*", (req, res) => {
  // Eğer istek crystal altına değilse (yani normal app ise) ana index'i gönder.
  if (!req.path.startsWith("/crystal")) {
    res.sendFile(path.join(__dirname, "public/index.html"));
  }
});

// 4) Sunucuyu başlat
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Sunucu http://localhost:${PORT} adresinde çalışıyor`);
});
```

**Önemli Nokta:**

* `app.use("/crystal", express.static(...))` koyduktan sonra `/crystal` altındaki tüm dosya istekleri (örn. `/crystal/index.html`, `/crystal/assets/xxx.js`, `/crystal/style.css`) `public/crystal` klasöründen servis edilir.
* `app.get("*")` kısmı sadece “`/crystal`” ile başlamayan yollar için “public/index.html”’i döner. Böylece `/crystal` → fallback yerine doğrudan statik içeriği yükler.

> **Uyarı:** Eğer `/crystal/index.html` uzantısını açıkça çağırmak isterseniz, örneğin `<iframe src="/crystal/index.html">`, sorun yaşamazsınız. Ama bizim `express.static("/crystal")` zaten “/crystal” isteğini otomatik `/crystal/index.html`’e yönlendirecek.

---

### 2. Customize-app İçindeki Vite Konfigürasyonunu Düzenle

`customize-app/ThreeDModelViewer/vite.config.js` (veya `.ts`) içinde mutlaka şu satırları ekleyin veya güncelleyin:

```js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  base: "/crystal/",        // <<< Bu satır çok önemli!
  plugins: [react()],
  // Diğer ayarlarınız varsa onları da bırakın
});
```

**Neden “base: '/crystal/'”?**

* Vite build çıktısını (`dist/` klasörü) oluştururken içindeki tüm asset referanslarını (örn. `/assets/xxx.js`, `/style.css`) otomatik olarak `/crystal/assets/xxx.js` ve `/crystal/style.css` şeklinde prefix’ler.
* Sonuçta, Express’e kopyaladığımızda “public/crystal/index.html” içindeki `<script src="/crystal/assets/xxx.js">` adresi doğruya gider. Eğer `base` tanımlı değilse build, tüm assetleri kök dizine göre (örn. `/assets/xxx.js`) aramaya çalışır ve “404” alırsınız.

**Vite build adımları:**

```bash
cd customize-app/ThreeDModelViewer
npm install
npm run build
# output: ThreeDModelViewer/dist içinde index.html, assets vs.
```

Ardından `dist/` içeriğini kök projenin `public/crystal/` klasörüne kopyalayın.

---

### 3. `public/index.html` İçindeki “<iframe>” Kullanımını Kontrol Et

Ana uygulamanın (üst seviye) `public/index.html` dosyanızda şöyle bir bölge varsa:

```html
<!-- ... sayfanın geri kalan kafa kodu ... -->
<div style="width: 100%; height: 100vh">
  <iframe
    src="/crystal"
    title="3D Crystal Customizer"
    style="
      width: 100%;
      height: 100%;
      border: none;
      margin: 0;
      padding: 0;
    "
  ></iframe>
</div>
```

* `src="/crystal"` dedikten sonra Express, `/crystal` isteğini önce `public/crystal/index.html`’e yönlendirir. Dolayısıyla **iframe içinde doğrudan Customize-app** yüklenir.
* **Kesinlikle** `src="/"` veya `src="/index.html"` yapmayın. Bu, yeniden ana index’i çağırır ve iframe içinde yine kendinizin embed’ine döngüsel olarak gelir (“iç içe sayfalar” sorunu).

> **Not:** Eğer React Router kullanıyorsanız ve Customize-app’in kendi router’ı varsa, iframe’ten erişim için `/crystal` altındaki her route’a da fallback vermeniz gerekebilir. Yani “Not Found” almamak için Express’e ek bir satır ekleyin:
>
> ```js
> // /crystal/alt/yol -> public/crystal/index.html dönsün
> app.get("/crystal/*", (req, res) => {
>   res.sendFile(path.join(__dirname, "public/crystal/index.html"));
> });
> ```
>
> ancak Express’in `express.static("/crystal")` + `vite.config.base="/crystal/"` ayarları çoğu durumda yeterli olur.

---

### 4. Özet ve Kontrol Listesi

Aşağıdaki adımları “kesinlikle” eksiksiz uygulayın. Ardından projeyi Replit’te yeniden başlatın, konsolu sıfırlayın ve tarayıcıyı (DevTools → Network & Console) temiz konuma getirin:

1. **`customize-app/ThreeDModelViewer/vite.config.js`** → `base: "/crystal/"` satırını ekle.

2. **Tüm `.tsx/.jsx` dosyalarını** (özellikle `toast.tsx`) açın, dosyanın tam en başında **hiçbir kod** olmadan önce (gizli BOM da dahil) mutlaka `import React from "react";` satırı olduğundan emin olun.

   * Örnek `toast.tsx` başı:

     ```tsx
     import React from "react";
     import * as ToastPrimitives from "@radix-ui/react-toast";
     import { cva, type VariantProps } from "class-variance-authority";
     import { X } from "lucide-react";
     import { cn } from "@/lib/utils";
     // … devam eden kod …
     ```

3. **Build aşaması:**

   ```bash
   cd customize-app/ThreeDModelViewer
   npm install
   npm run build
   # Sonra:
   rm -rf ../public/crystal
   mkdir -p ../public/crystal
   cp -r dist/* ../public/crystal/
   ```

4. **Express sunucu (server-merged.js vs) dosyasını** aşağıdaki hâle getir:

   ```js
   import express from "express";
   import path from "path";
   import { fileURLToPath } from "url";

   const __filename = fileURLToPath(import.meta.url);
   const __dirname = path.dirname(__filename);

   const app = express();

   // Ana site root – public klasörü
   app.use(express.static(path.join(__dirname, "public")));

   // /crystal rotası → public/crystal içeriğini sunar
   app.use("/crystal", express.static(path.join(__dirname, "public/crystal")));

   // /crystal altındaki SPA rota fallback’i (isteğe bağlı; router varsa ekleyin):
   app.get("/crystal/*", (req, res) => {
     res.sendFile(path.join(__dirname, "public/crystal/index.html"));
   });

   // Diğer tüm istekler → main index.html
   app.get("*", (req, res) => {
     if (!req.path.startsWith("/crystal")) {
       res.sendFile(path.join(__dirname, "public/index.html"));
     }
   });

   const PORT = process.env.PORT || 3000;
   app.listen(PORT, () => {
     console.log(`Sunucu http://localhost:${PORT} adresinde çalışıyor`);
   });
   ```

5. **Ana “public/index.html”** içinde iframe kullanıyorsanız, mutlaka `src="/crystal"` (veya `src="/crystal/index.html"`) yazın.

   * Eğer direkt embed yerine React Router kullanan bir React uygulaması olacaksa, iframe yerine `<Routes>` + `<Route path="/crystal" element={<CustomizeApp />} />` şeklinde içten yüklü bir yol (nested route) da tercih edebilirsiniz. Fakat iframe daha hızlı entegrasyondur.

6. **Replit’e bu komutları çalıştırmasını söyleyin:**

   * `npm install`
   * `cd customize-app/ThreeDModelViewer && npm install && npm run build && cd ../../ && rm -rf public/crystal && mkdir -p public/crystal && cp -r customize-app/ThreeDModelViewer/dist/* public/crystal/`
   * Sonra `npm run dev` ya da `npm start` (hangi script varsa) ile sunucuyu ayağa kaldır.

7. **Tarayıcıda gidin:**

   * `http://localhost:5173/` (ana site) → Ana uygulamanın gözüktüğünü, “Crystal Energy” sekmesini tıklayın.
   * “Crystal Energy” sekmesindeki alanın (iframe veya route) sizi `http://localhost:5173/crystal` altındaki customize‐app build’ine (3D model viewer, ip simülasyonu vb.) götürdüğünü doğrulayın.
   * Hiçbir “404” veya “preamble” hatası konsolda kalmamış olacak.

---

## Neden “İç İçe” Sayfalar Görülüyor?

* Express’in yanlış fallback’i yüzünden:

  * `/crystal` isteği geldiğinde `app.use("/crystal", express.static(...))` middleware dosya bulamazsa (ör. `/crystal/index.js` eksikse), Express onu “tüm GET’leri yakala → public/index.html” kısmına yolluyor. Yani `public/index.html` içinde yine aynı `<iframe src="/crystal">` var. Böylece ana index → iframe → ana index → iframe döngüsü başlıyor.
* Veya “404 Not Found” çünkü `/crystal/assets/app.js` gibi bir dosya olmadığı için fallback index’e dönülüyor, o da embed’i tekrar çağırıyor.

**Çözüm**: Yukarıda anlattığım 1–5 numaralı adımları uyguladığınızda, `/crystal/*` istekleri her zaman doğrudan `public/crystal` altındaki “doğru” dosyayı (örneğin index.html veya var olan JS/CSS) dönecek; fallback, ana uygulamayı ancak `/crystal`’ın dışındaki tüm yollarda gösterecek.

---

Bu adımları eksiksiz uyguladıktan sonra tarayıcınızı (ve Replit’in Build/Deploy sürecini) yeniden başlatın. Sonuç:

* “Crystal Energy” sekmesine gittiğinizde **ana uygulama değil**, doğrudan “Customize 3D App” (ThreeDModelViewer) görünür.
* “İç içe sayfa” problemi kalmaz, “404 Not Found” hatası kalmaz, konsolda “@vitejs/plugin-react can’t detect preamble” hatası kalmaz.

Bu anlatımı Replit AI’a “bunları adım adım yap” diye verdiğinizde, sıfır hata ile hem ana site’nin içine “Crystal” alt uygulamasını entegre etmiş olur.
